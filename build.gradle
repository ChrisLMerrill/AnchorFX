import java.text.SimpleDateFormat

buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.6.0'
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0'
        classpath 'org.kordamp.gradle:stats-gradle-plugin:0.1.5'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.12.0'
        classpath 'net.nemerosa:versioning:1.6.0'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.5'
    }
}

Date buildTimeAndDate = new Date()
ext {
    buildDate = new SimpleDateFormat('yyyy-MM-dd').format(buildTimeAndDate)
    buildTime = new SimpleDateFormat('HH:mm:ss.SSSZ').format(buildTimeAndDate)
}

apply plugin: 'java'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'org.kordamp.gradle.stats'
apply from: 'gradle/idea.gradle'
apply from: 'gradle/code-quality.gradle'
apply from: 'gradle/code-coverage.gradle'
apply from: 'gradle/publishing.gradle'
apply from: 'gradle/javafx.gradle'

repositories {
    jcenter()
}

if (JavaVersion.current().isJava8Compatible()) {
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

configurations {
    compileOnly
    testCompileOnly
}

tasks.withType(JavaCompile) {
    sourceCompatibility = sourceCompatibility
    targetCompatibility = targetCompatibility
    options*.encoding = 'UTF-8'
}

sourceSets {
    main {
        compileClasspath += [configurations.compileOnly]
    }
    test {
        compileClasspath += [configurations.testCompileOnly]
    }
}

javadoc {
    classpath += [configurations.compileOnly]
}

idea {
    module {
        scopes.PROVIDED.plus += [configurations.compileOnly]
        scopes.PROVIDED.plus += [configurations.testCompileOnly]
    }
}

tasks.withType(AbstractCompile) {
    if (rootProject.hasProperty('lint') && rootProject.lint.toBoolean()) {
        options.compilerArgs = [
            '-Xlint:all', '-Xlint:deprecation', '-Xlint:unchecked'
        ]
    }
}

task sourceJar(type: Jar) {
    group 'Build'
    description 'An archive of the source code'
    classifier 'sources'
    from sourceSets.main.allSource
}

dependencies {
    compileOnly project.files(project.jfxrtLocation)
    testCompile 'junit:junit:4.12'
}

test {
    testLogging {
        afterSuite { desc, result ->
            if (!desc.parent) {
                println "Test results ${project.name}: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
            }
        }
    }
}

javadoc {
    excludes = ['**/*.html', 'META-INF/**']

    options.addBooleanOption('javafx', true)

    options.use = true
    options.splitIndex = true
    options.encoding = 'UTF-8'
    options.author = true
    options.version = true
    options.windowTitle = "$name $version"
    options.docTitle = "$name $version"
    options.footer = rootProject.javadocFooter
    options.links = ['http://junit.org/javadoc/latest/',
                     'http://docs.oracle.com/javase/8/docs/api/',
                     'http://docs.oracle.com/javase/8/javafx/api/']
}
